// SPDX-License-Identifier: BSD-2-Clause
// Copyright CM4all GmbH
// author: Max Kellermann <mk@cm4all.com>

#pragma once

#include "Handler.hxx"
#include "io/Logger.hxx"
#include "event/net/djb/NetstringServer.hxx"
#include "lua/AutoCloseList.hxx"
#include "lua/Ref.hxx"
#include "lua/Resume.hxx"
#include "lua/ValuePtr.hxx"
#include "lua/CoRunner.hxx"
#include "util/DisposablePointer.hxx"
#include "util/IntrusiveList.hxx"

#include <cstdint>
#include <list>

#include <sys/socket.h> // for struct ucred

struct MutableMail;
struct Action;
class Instance;

class QmqpRelayConnection final :
	public AutoUnlinkIntrusiveListHook,
	public NetstringServer,
	Lua::ResumeListener,
	RelayHandler {

	Instance &instance;

	const struct ucred peer_cred;

	const Lua::ValuePtr handler;
	ChildLogger logger;

	Lua::AutoCloseList auto_close;

	char received_buffer[256];

	/**
	 * The Lua thread which runs the handler coroutine.
	 */
	Lua::CoRunner thread;

	/**
	 * The #LuaMail that is going to be sent once we've connected to
	 * the outgoing QMQP server.
	 */
	Lua::Ref lua_mail;

	MutableMail *mail_ptr;

	std::string account;

	/**
	 * An instance of the class that actually relays the email,
	 * e.g. #RemoteRelay, #ExecRelay.  The only action we ever
	 * need on it is destruct it when our client closes the
	 * connection (i.e. cancellation), therefore we don't need to
	 * know its type and we declare it as #DisposablePointer.
	 */
	DisposablePointer relay_operation;

	CoarseTimerEvent relay_timeout;

	// only used for logging
	enum class State : uint_least8_t {
		INIT,
		LUA,
		NOT_RELAYING,
		RELAYING,
		END
	} state = State::INIT;

public:
	QmqpRelayConnection(Instance &_instance,
			    size_t max_size, Lua::ValuePtr _handler,
			    const RootLogger &parent_logger,
			    UniqueSocketDescriptor &&_fd, SocketAddress address);
	~QmqpRelayConnection() noexcept;

	static void Register(lua_State *L);

protected:
	void DoConnect(const Action &action, const MutableMail &mail);
	void DoExec(const Action &action, const MutableMail &mail);
	void DoRawExec(const Action &action, const MutableMail &mail);
	void Do(const Action &action, const MutableMail &mail);
	void OnResponse(const void *data, size_t size);

	void OnRequest(AllocatedArray<std::byte> &&payload) override;
	void OnError(std::exception_ptr ep) noexcept override;
	void OnDisconnect() noexcept override;

private:
	lua_State *GetMainState() const noexcept {
		return thread.GetMainState();
	}

	/**
	 * Assemble all headers generated by this process.
	 */
	std::list<std::span<const std::byte>> AssembleHeaders(const MutableMail &mail) noexcept;

	void Log(std::string_view message) noexcept;

	void OnRelayTimeout() noexcept;

	/**
	 * Send the response and destroy the connection.
	 */
	void Finish(std::string_view response) noexcept;

	/* virtual methods from class RelayHandler */
	void OnRelayResponse(std::string_view response) noexcept override;
	void OnRelayError(std::string_view response,
			  std::exception_ptr error) noexcept override;

	/* virtual methods from class Lua::ResumeListener */
	void OnLuaFinished(lua_State *L) noexcept override;
	void OnLuaError(lua_State *L, std::exception_ptr e) noexcept override;
};
